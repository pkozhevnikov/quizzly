package quizzly.author

import akka.actor.typed.*

// internal identifier of Sections and Items
// that is generated by their contaiers
// (Quiz and Section respectively)
type SC = String

type HintIdx = Int

final case class Statement(text: String, image: Option[String])

type Hint = Set[Statement]

final case class Item(
    intro: String,
    definition: Statement,
    hints: List[Hint],
    hintsVisible: Boolean,
    solutions: List[HintIdx],
    sc: SC
)

final case class Section(
    sc: SC,
    title: String,
    items: List[Item],
    authors: Set[Author],
    owner: Option[Author],
    quizID: QuizID
) extends CborSerializable:
  def nextItemSC: SC = (items.map(_.sc).map(_.toInt).maxOption.getOrElse(0) + 1).toString
object Section:

  sealed trait Command extends CborSerializable
  sealed trait Event extends CborSerializable

  final case class Create(
      sc: SC,
      title: String,
      owner: Author,
      quizID: QuizID
  ) extends Command
  final case class Created(
      sc: SC,
      title: String,
      owner: Author,
      quizID: QuizID
  ) extends Event

  final case class Update(
      title: String,
      replyTo: ActorRef[Resp[Nothing]]
  ) extends Command
  final case class Updated(title: String) extends Event

  final case class SaveItem(
      item: Item,
      sc: Option[SC], // empty if the item is new
      replyTo: ActorRef[Resp[SC]]
  ) extends Command
  def itemNotFound: Error = Error(2011, "item not found")
  final case class ItemSaved(
      item: Item
  ) extends Event

  final case class MoveItem(sc: SC, up: Boolean, replyTo: ActorRef[Resp[List[SC]]]) extends Command
  final case class ItemMoved(sc: SC, newOrder: List[SC]) extends Event
