package quizzly.author

import java.time.*
import akka.actor.typed.*

type QuizID = String
type PersonID = String
type AuthorID = String
type InspectorID = String

final case class Person(id: PersonID, name: String)
type Curator = Person
type Author = Person
type Inspector = Person

sealed trait Quiz:
  def id: QuizID

object Quiz:

  final case class Blank(id: QuizID) extends Quiz

  //an internal identifier of items and sections
  //that is generated by Quiz entity itself, thus 
  //keeping consistency
  type SC = String
  
  type HintIdx = Int

  final case class Statement(text: String, image: Option[String])
  type Hint = List[Statement]
  final case class Item(
    intro: String,
    definition: Statement,
    hints: List[Hint],
    hintsVisible: Boolean,
    solutions: List[HintIdx],
    sc: SC
  )
  final case class Section(
    title: String,
    items: List[Item],
    sc: SC
  )

  case class Error(code: Int, reason: String, clues: Set[String] = Set.empty)
      extends CborSerializable:
    def +(clue: String): Error = Error(code, reason, clues + clue)
    def ++(clues: String*): Error = Error(code, reason, this.clues ++ clues)

  sealed trait Resp[+V] extends CborSerializable
  type RespOK = Resp[Nothing]
  object Resp:
    case object OK extends RespOK
  final case class Good[+V](v: V) extends Resp[V]
  final case class Bad[+V](e: Error) extends Resp[V]

  sealed trait Command extends CborSerializable

  sealed trait Event extends CborSerializable

  final case class Create(
    id: QuizID,
    title: String,
    intro: String,
    curator: Curator,
    authors: Set[Author],
    inspectors: Set[Inspector],
    recommendedLength: Duration,
    replyTo: ActorRef[Resp[CreateDetails]]
  ) extends Command
  final case class CreateDetails(
    curator: Curator,
    authors: Set[Author],
    inspectors: Set[Inspector]
  )
    
  def quizAlreadyExists: Error = Error(2001, "quiz already exists")
  def tooShortTitle: Error = Error(2002, "too short title")
  def notEnoughAuthors: Error = Error(2003, "not enough authors or inspectors")

  final case class Created(
    id: QuizID,
    title: String,
    intro: String,
    curator: Curator,
    authors: Set[Author],
    inspectors: Set[Inspector],
    recommendedLength: Duration
  ) extends Event

  final case class Composing(
    id: QuizID,
    title: String,
    intro: String,
    curator: Curator,
    authors: Set[Author],
    inspectors: Set[Inspector],
    recommendedLength: Duration,
    readinessSigns: Set[AuthorID] = Set.empty,
    sections: List[Section] = List.empty
  ) extends Quiz

  final case class Update(
    title: String,
    intro: String,
    recommendedLength: Duration,
    replyTo: ActorRef[Resp[Nothing]]
  ) extends Command
  final case class Updated(
    title: String,
    intro: String,
    recommendedLength: Duration
  ) extends Event

  final case class SetReadySign(author: AuthorID, replyTo: ActorRef[Resp[Nothing]]) 
    extends Command
  def notAuthor: Error = Error(2004, "not an author")
  final case class ReadySignSet(author: AuthorID) extends Event
  case object GoneForReview extends Event
  final case class Review(
    composing: Composing, 
    readinessSigns: Set[AuthorID], 
    approvalSigns: Set[InspectorID],
    disapprovalSigns: Set[InspectorID]
  ) extends Quiz:
    override def id: QuizID = composing.id

  final case class Assess(
    inspector: InspectorID, 
    approval: Boolean, 
    replyTo: ActorRef[Resp[Nothing]]
  ) extends Command
  def notInspector: Error = Error(2005, "not an inspector")
  final case class Assessed(inspector: InspectorID, approval: Boolean)
  case object GoneReleased extends Event
  final case class Released(
    id: QuizID,
    title: String,
    intro: String,
    curator: Curator,
    authors: Set[Author],
    inspectors: Set[Inspector],
    recommendedLength: Duration,
    sections: List[Section],
    obsolete: Boolean
  ) extends Quiz

  final case class SetObsolete(replyTo: ActorRef[Nothing]) extends Command
  case object GotObsolete extends Event

